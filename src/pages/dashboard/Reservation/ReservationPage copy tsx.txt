//
/* eslint-disable @typescript-eslint/no-explicit-any */
import { FC, useEffect, useState } from "react";
// import { useNavigate } from "react-router";
import { useSelector } from "react-redux";
import { Dropdown } from "antd";
import { MdKeyboardArrowDown } from "react-icons/md";
// import { useAppSelector } from "../../../hooks/useTypedSelectors";
import { RootAppState } from "../../../redux/store";
import { Button } from "../../../components";
// import ReservationCard from "./ReservationCard"; // For stay reservations
import ReservationEventPage from "./ReservationEventPage"; // For event reservations
import api from "../../../api";

// const reservationTabs = [
//   { label: "Requests Made", key: "requests" },
//   { label: "My Listings", key: "listings" },
// ];

const category = [
  { label: "Stay", key: "stay" },
  { label: "Event", key: "event" },
];

const events = [
  { label: "Online", key: "online" },
  { label: "Onsite", key: "onsite" },
];

const ReservationPage: FC = () => {
  // const {
  //   reservations: { online, onsite },
  // }: any = useAppSelector((state: RootAppState) => state.events);

  const role = (useSelector((state: RootAppState) => state.auth.user.role) || "BUYER") as string;

  // const [selectTab, setSelectTab] = useState<string>(reservationTabs[0].key);
  const [selectCategory, setSelectCategory] = useState<string>("stay");
  const [selectEvent, setSelectEvent] = useState<string>("online");
  const [listEvents, setListEvents] = useState<any[]>([]);

  useEffect(() => {
    const fetchReservations = async () => {
      try {
        let endpoint = "";

        if (selectCategory === "event") {
          const eventType = selectEvent.toUpperCase();

          endpoint =
            role === "BUYER"
              ? `events/booked-events?eventType=${eventType}`
              : `events/bookings-on-my-events?eventType=${eventType}`;
        } else if (selectCategory === "stay") {
          endpoint =
            role === "BUYER"
              ? `rooms/buyer/my-booked-rooms`
              : `rooms/seller/booked-rooms`;
        }

        const response = await api.get(endpoint);
        // console.log(response, "response");
        const result =
          response?.data?.eventBookings || // for seller events
          response?.data?.bookedEvents || // for buyer events
          response?.data?.roomBookings || // for stays
          [];
        console.log(result, "result");

        setListEvents(result);
      } catch (error) {
        console.error("Error fetching reservations:", error);
        setListEvents([]);
      }
    };

    fetchReservations();
  }, [selectCategory, selectEvent, role]);
// console.log(listEvents, "listEvents");
  const onSelectCategory = ({ key }: { key: string }) => setSelectCategory(key);
  const onSelectEvent = ({ key }: { key: string }) => setSelectEvent(key);

  return (
    <>
      <section className="flex flex-col flex-1 w-full bg-white p-8">
        <div className="flex items-center justify-between w-full mt-4">
          <h1 className="text-2xl text-dark-blue font-semibold capitalize">
            {`${listEvents?.length || 0} ${selectEvent} ${selectCategory} Booked`}
          </h1>
          <div className="flex items-center justify-center gap-4">
            <Dropdown
              menu={{
                items: category,
                selectable: true,
                defaultSelectedKeys: ["stay"],
                onClick: onSelectCategory,
              }}
              trigger={["click"]}
            >
              <Button
                title={selectCategory}
                iconPlacement="right"
                icon={<MdKeyboardArrowDown />}
              />
            </Dropdown>

            {selectCategory === "event" && (
              <Dropdown
                menu={{
                  items: events,
                  selectable: true,
                  defaultSelectedKeys: ["online"],
                  onClick: onSelectEvent,
                }}
                trigger={["click"]}
              >
                <Button
                  title={selectEvent}
                  iconPlacement="right"
                  icon={<MdKeyboardArrowDown />}
                />
              </Dropdown>
            )}
          </div>
        </div>
      </section>

      <main className="relative p-8 h-fit w-full flex flex-col gap-10">
        {selectCategory === "event" &&
          listEvents?.map((item: any, i: number) => (
            <ReservationEventPage
              key={i}
              data={{
                id: item?.id,
                name: item.Event?.name,
                status: item.Event?.status,
                refNumber: item.Payment?.refId,
                location: item.Event?.location,
                startDate: new Date(item.Payment?.paidAt).toLocaleDateString(),
                endDate: new Date(item.Payment?.paidAt).toLocaleDateString(), // Optional: Replace with actual end date if available
                price: item.Payment?.amount,
                nights: 1,
                guest: 1,
                category:'event',
                imageUrl:
                  item.Event?.files?.[0]?.url || "https://via.placeholder.com/300",
              }}
            />
          ))}

        {selectCategory === "stay" &&
          listEvents?.map((room: any, i: number) => (
            <ReservationEventPage key={i} data={{
              id: room?.id,
              name: room.Room?.title,
              status: room?.Room?.status,
              refNumber: room?.Payment?.refId,
              location: room.Room?.place?.city,
              startDate: room?.startDate ? new Date(room.startDate)?.toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric', }) : '',
             
              endDate: room?.endDate ? new Date(room.endDate)?.toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
              }) : '', // Optional: Replace with actual end date if available
              price: room?.Payment?.amount,
              nights: room?.startDate && room?.endDate
              ? Math.round(
                  (new Date(room.endDate).getTime() - new Date(room.startDate).getTime()) /
                  (1000 * 60 * 60 * 24)
                )
              : 0,
              guest: room?.noOfGuests,
              category:'stay',

              imageUrl:
                room.Room?.images?.[0] || "https://via.placeholder.com/300",
            }} />
          ))}
      </main>
    </>
  );
};

export default ReservationPage;
